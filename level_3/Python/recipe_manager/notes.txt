Recipe data structure Class VS Dictionary
Class structure would allow for better encapsulation as all functionality relating to a recipe would be contained
within the class. With a Dictionary structure there would have to be a separate recipe utils file that contains all the
functionality.
With Dictionaries it would have been easier to implement file I/O operations with JSON

Recipe details data types
Ingredients - String vs Array vs List
Instructions - String vs Array vs List

Editing recipe ingredients
Ask "Yes" or "No" after every edit if the user wishes to continue editing ingredients - can be annoying if editing
multiple ingredients but makes more sense from an end user standpoint
OR
Require the user to enter "0" after they are done with their edits - not annoying when editing multiple ingredients but
can feel a bit odd from an end user standpoint

File I/O
CSV vs JSON

Editing / Deleting recipes option place - At main menu level OR At recipe details level
It would be more obvious to the user if the edit and delete recipe options were present at the main menu. If they were
at the recipe details level the user would have to go through several other menus and as such these functionalities may
seem hidden or hard to find.
If the edit and delete options were at the recipe details level the user would have an easier time deciding what to do
as the details of the recipe would be right there as opposed to having to navigate several other menus to get to them.


Assumptions made:
The user will not intentionally alter the contents of the text file storing the recipe list in an attempt to break the
application


Ideas:
Adding ingredients / instructions before or after certain elements already in that list. - While this would be a good
quality of life change I feel like it would not add much to the project and the current editing functionality fulfils
the requirement of the project spec.

Confirmation required when deleting recipes
Good quality of life, but I feel like I am starting to go out of scope of the project with this.

Error handling - logging of full session details (how the user navigated the app, all of the questions they were asked
along with how they responded.)
This would be very useful for error handling as in addition to the stacktrace it would also provide the full recreation
steps to those investigating.

Regular expressions for validation of all string inputs.
For a normal application regular expressions would be preferred for validation but as the project does not store data in
a database this did not seem needed.

Better application flow control
Currently there are some menus that have the option to return to main menu and there are other menus which are submenus
which can only go to their previous menu, not main menu. This makes for an awkward control and while changing it would
not be challenging it would still take a lot of time as essentially the whole application will need to be re-tested.

Recipe list save to file after every change
Currently the recipe list stored in the text file is only saved just before the application closes. This could result in
change loss if the app unexpectedly crashes during a session. Changing this at this point would require lots of time as
the whole application will need to be re-tested.

Make sure all code follows the same logic for error input
Either repeat menu after invalid input OR don't


Challenges faced:
Reading data from file and transforming it into code
Checking if a substring is within the recipe ingredients list of each recipe within a Recipe object list

Testing. So much testing.
Application control flows are a nightmare in console apps, especially with nested menus. Automated testing could have
helped lighten the burden, but I underestimated the size of the project, so I did not make any.